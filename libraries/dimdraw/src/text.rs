use scad::*;

use super::FONT_SCALE;

// Characters
static CHARS_LOOKUP: &'static str = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}";

// Binary decode table
static DEC_TABLE: [&'static str; 32] = [
    "00000", "00001", "00010", "00011", "00100", "00101", "00110", "00111", "01000", "01001",
    "01010", "01011", "01100", "01101", "01110", "01111", "10000", "10001", "10010", "10011",
    "10100", "10101", "10110", "10111", "11000", "11001", "11010", "11011", "11100", "11101",
    "11110", "11111",
];

// Chracter table defining 5x7 characters
// Adapted from: http://www.geocities.com/dinceraydin/djlcdsim/chartable.js
static CHAR_TABLE: [[usize; 7]; 94] = [
    [0, 0, 0, 0, 0, 0, 0],
    [4, 0, 4, 4, 4, 4, 4],
    [0, 0, 0, 0, 10, 10, 10],
    [10, 10, 31, 10, 31, 10, 10],
    [4, 30, 5, 14, 20, 15, 4],
    [3, 19, 8, 4, 2, 25, 24],
    [13, 18, 21, 8, 20, 18, 12],
    [0, 0, 0, 0, 8, 4, 12],
    [2, 4, 8, 8, 8, 4, 2],
    [8, 4, 2, 2, 2, 4, 8],
    [0, 4, 21, 14, 21, 4, 0],
    [0, 4, 4, 31, 4, 4, 0],
    [8, 4, 12, 0, 0, 0, 0],
    [0, 0, 0, 31, 0, 0, 0],
    [12, 12, 0, 0, 0, 0, 0],
    [0, 16, 8, 4, 2, 1, 0],
    [14, 17, 25, 21, 19, 17, 14],
    [14, 4, 4, 4, 4, 12, 4],
    [31, 8, 4, 2, 1, 17, 14],
    [14, 17, 1, 2, 4, 2, 31],
    [2, 2, 31, 18, 10, 6, 2],
    [14, 17, 1, 1, 30, 16, 31],
    [14, 17, 17, 30, 16, 8, 6],
    [8, 8, 8, 4, 2, 1, 31],
    [14, 17, 17, 14, 17, 17, 14],
    [12, 2, 1, 15, 17, 17, 14],
    [0, 12, 12, 0, 12, 12, 0],
    [8, 4, 12, 0, 12, 12, 0],
    [2, 4, 8, 16, 8, 4, 2],
    [0, 0, 31, 0, 31, 0, 0],
    [16, 8, 4, 2, 4, 8, 16],
    [4, 0, 4, 2, 1, 17, 14],
    [14, 21, 21, 13, 1, 17, 14],
    [17, 17, 31, 17, 17, 17, 14],
    [30, 17, 17, 30, 17, 17, 30],
    [14, 17, 16, 16, 16, 17, 14],
    [30, 17, 17, 17, 17, 17, 30],
    [31, 16, 16, 30, 16, 16, 31],
    [16, 16, 16, 30, 16, 16, 31],
    [15, 17, 17, 23, 16, 17, 14],
    [17, 17, 17, 31, 17, 17, 17],
    [14, 4, 4, 4, 4, 4, 14],
    [12, 18, 2, 2, 2, 2, 7],
    [17, 18, 20, 24, 20, 18, 17],
    [31, 16, 16, 16, 16, 16, 16],
    [17, 17, 17, 21, 21, 27, 17],
    [17, 17, 19, 21, 25, 17, 17],
    [14, 17, 17, 17, 17, 17, 14],
    [16, 16, 16, 30, 17, 17, 30],
    [13, 18, 21, 17, 17, 17, 14],
    [17, 18, 20, 30, 17, 17, 30],
    [30, 1, 1, 14, 16, 16, 15],
    [4, 4, 4, 4, 4, 4, 31],
    [14, 17, 17, 17, 17, 17, 17],
    [4, 10, 17, 17, 17, 17, 17],
    [10, 21, 21, 21, 17, 17, 17],
    [17, 17, 10, 4, 10, 17, 17],
    [4, 4, 4, 10, 17, 17, 17],
    [31, 16, 8, 4, 2, 1, 31],
    [14, 8, 8, 8, 8, 8, 14],
    [0, 1, 2, 4, 8, 16, 0],
    [14, 2, 2, 2, 2, 2, 14],
    [0, 0, 0, 0, 17, 10, 4],
    [31, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 2, 4, 8],
    [15, 17, 15, 1, 14, 0, 0],
    [30, 17, 17, 25, 22, 16, 16],
    [14, 17, 16, 16, 14, 0, 0],
    [15, 17, 17, 19, 13, 1, 1],
    [14, 16, 31, 17, 14, 0, 0],
    [8, 8, 8, 28, 8, 9, 6],
    [14, 1, 15, 17, 15, 0, 0],
    [17, 17, 17, 25, 22, 16, 16],
    [14, 4, 4, 4, 12, 0, 4],
    [12, 18, 2, 2, 2, 6, 2],
    [18, 20, 24, 20, 18, 16, 16],
    [14, 4, 4, 4, 4, 4, 12],
    [17, 17, 21, 21, 26, 0, 0],
    [17, 17, 17, 25, 22, 0, 0],
    [14, 17, 17, 17, 14, 0, 0],
    [16, 16, 30, 17, 30, 0, 0],
    [1, 1, 15, 19, 13, 0, 0],
    [16, 16, 16, 25, 22, 0, 0],
    [30, 1, 14, 16, 15, 0, 0],
    [6, 9, 8, 8, 28, 8, 8],
    [13, 19, 17, 17, 17, 0, 0],
    [4, 10, 17, 17, 17, 0, 0],
    [10, 21, 21, 17, 17, 0, 0],
    [17, 10, 4, 10, 17, 0, 0],
    [14, 1, 15, 17, 17, 0, 0],
    [31, 8, 4, 2, 31, 0, 0],
    [2, 4, 4, 8, 4, 4, 2],
    [4, 4, 4, 4, 4, 4, 4],
    [8, 4, 4, 2, 4, 4, 8],
];

pub fn text(string: &str) -> ScadObject {
    let mut parent = scad!(Scale(vec3(FONT_SCALE, FONT_SCALE, FONT_SCALE)));

    // process each character
    for (itext, c) in string.char_indices() {
        // convert to index, this is ASCII so find (byte-offset) will do
        let ichar = CHARS_LOOKUP.find(c).unwrap();

        // decode character - rows
        for row in 0..=6 {
            // select value to draw from table
            let val = DEC_TABLE[CHAR_TABLE[ichar][row]];

            //println!("  {} {}", row, val);

            // decode character - cols
            for col in 0..=4 {
                // bit to draw, each '0'/'1' in the DEC_TABLE represents a bit
                let bit = val.chars().nth(col).unwrap() == '1';

                if bit {
                    parent.add_child(scad!(
                        Translate(vec3(col as f32 + (6.0 * itext as f32), row as f32, 0.0));{
                            scad!(Cube(vec3(1.0001, 1.0001, 1.0)))
                        }));
                }
            }
        }
    }

    parent
}
